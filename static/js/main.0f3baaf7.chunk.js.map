{"version":3,"sources":["../../src/ModalGenerator.jsx","../../src/index.js","Modal.jsx","App.js","index.js"],"names":["ModalGenerator","modals","options","props","Promise","modalHash","Math","resolve","value","promiseResolve","reject","promiseReject","Component","render","this","Object","key","modal","parentNode","Modal","cancel","submit","ReactDOM","PureComponent","ModalContainer","ref","React","state","name","email","onChange","event","setState","target","style","border","marginBottom","padding","type","placeholder","onClick","createModal","App","showModal","then","data","alert","JSON","stringify","document","getElementById"],"mappings":"4jBAIA,ICDA,EDGqBA,c,cACnB,cAAmB,aACjB,wBADiB,SAOR,YACT,IAAMC,EAAS,EAAH,GAAQ,QAApB,eACOA,EAAP,GACA,WAAc,CAAEA,YAVC,SA6BV,8BAAYC,MAAZ,IAA6B,SAAAC,GAAK,OAAI,IAAIC,SAAQ,cAAmC,MACpFH,EAAW,EADyE,aAGtFI,EAnCYC,oCAAN,GA+CZ,WAAc,CACZL,OAAQ,GAAF,UACS,CACXM,QAbU,SAACC,GACf,cACAC,MAYIC,OATS,SAACF,GACd,cACAG,MAQIC,UAHW,EAIXT,MAJW,EAKXD,WANE,aA3CR,QAAa,CACXD,OAAQ,IAHO,E,0GAyDnBY,kBACE,OACE,kCACGC,KAFL,S,qCA7CW,IACHb,EAAWa,KADR,aAEX,OAAOC,OAAA,gBAA2B,YAAkB,IAAhBC,EAAgB,KAAXC,EAAW,KAC1CL,EAA+CK,EADL,UAC/Bd,EAAoCc,EADL,MACxBV,EAA6BU,EADL,QACfP,EAAoBO,EADL,OAE1CC,EAD+CD,EADL,mBAG5CE,EACJ,4BAEEH,IAFF,EAGEI,OAHF,EAIEC,OAAQd,KAGZ,OAAOW,EAAaI,mBAAH,GAAjB,U,6BA3BetB,CAAuBuB,iBCDtCC,EAAiB,kBACrB,qBAAgBC,IAAK,YAAYN,QCHnC,MAAMA,UAAcO,IAAMd,UAAW,eAAD,oBAClCe,MAAQ,CACNC,KAAM,GACNC,MAAO,IAHyB,KAKlCC,SAAYC,IACVjB,KAAKkB,SAAS,CACZ,CAACD,EAAME,OAAOL,MAAOG,EAAME,OAAOzB,SAGtCK,SAAW,MAAD,EACmBC,KAAKX,MAAxBkB,EADA,EACAA,OAAQD,EADR,EACQA,OADR,EAEgBN,KAAKa,MAArBC,EAFA,EAEAA,KAAMC,EAFN,EAEMA,MACd,OACE,yBACEK,MAAO,CACLC,OAAQ,oBACRC,aAAc,OACdC,QAAS,SAGX,6CACA,2BAAOP,SAAUhB,KAAKgB,SAAUQ,KAAK,OAAOV,KAAK,OAAOW,YAAY,SACpE,2BAAOT,SAAUhB,KAAKgB,SAAUQ,KAAK,OAAOV,KAAK,QAAQW,YAAY,UACrE,4BAAQC,QAAS,IAAMnB,EAAO,CAAEO,OAAMC,WAAtC,UACA,4BAAQW,QAASpB,GAAjB,YAMOqB,IDxBM7B,EAAWV,ECwBjBuC,GDxBM7B,ECwBMO,EDxBiB,SAAAhB,GAAK,OAAIgB,cAAJ,KENlC,MAAMuB,UAAYhB,IAAMd,UAAW,eAAD,oBAC/C+B,UAAY,KACVA,IAAYC,KAAMC,IAChBC,MAAMC,KAAKC,UAAUH,EAAM,KAAM,KAChC,KACDC,MAAM,eAGVjC,SACE,OACE,6BACE,kBAAC,EAAD,MACA,gEACA,4BAAQ2B,QAAS1B,KAAK6B,WAAtB,gBCbRrB,IAAST,OAAO,kBAAC,EAAD,MAASoC,SAASC,eAAe,W","file":"static/js/main.0f3baaf7.chunk.js","sourcesContent":["import React, { PureComponent, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\n\n// generate random hash for modal\nconst getHash = () => Math.random().toString(36).substr(2, 9);\n\nexport default class ModalGenerator extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modals: {},\n    };\n  }\n  // remove modal from 'this.state.modals'\n  onDelete = (modalHash) => {\n    const modals = { ...this.state.modals };\n    delete modals[modalHash];\n    this.setState({ modals });\n  };\n  // get list of modals\n  get modals() {\n    const { modals } = this.state;\n    return Object.entries(modals).map(([key, modal]) => {\n      const { Component, props, resolve, reject, options } = modal;\n      const { parentNode } = options;\n      const Modal = (\n        <Component\n          {...props}\n          key={key}\n          cancel={reject}\n          submit={resolve}\n        />\n      );\n      return parentNode ? ReactDOM.createPortal(Modal, parentNode) : Modal;\n    });\n  }\n  create = (Component, options = {}) => props => new Promise((promiseResolve, promiseReject) => {\n    const { modals } = this.state;\n    // generate random hash for new modal\n    const modalHash = getHash();\n    // callback to close modal and resolve modal promise\n    const resolve = (value) => {\n      this.onDelete(modalHash);\n      promiseResolve(value);\n    };\n    // callback to close modal and reject modal promise\n    const reject = (value) => {\n      this.onDelete(modalHash);\n      promiseReject(value);\n    };\n    // add new modal into 'this.state.modals'\n    this.setState({\n      modals: {\n        [modalHash]: {\n          resolve,\n          reject,\n          Component,\n          props,\n          options,\n        },\n        ...modals,\n      },\n    });\n  });\n  render() {\n    return (\n      <Fragment>\n        {this.modals}\n      </Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport ModalGenerator from './ModalGenerator';\n\nlet Modal;\n\nconst ModalContainer = () => (\n  <ModalGenerator ref={(node) => { Modal = node; }} />\n);\n\n// function to create new promise based modal\nconst createModal = (Component, options) => props => Modal.create(Component, options)(props);\n\nexport { ModalContainer, createModal };\n","import React from 'react';\nimport { createModal } from 'promodal';\n\nclass Modal extends React.Component {\n  state = {\n    name: '',\n    email: '',\n  };\n  onChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  };\n  render () {\n    const { submit, cancel } = this.props;\n    const { name, email } = this.state;\n    return (\n      <div\n        style={{\n          border: '1px solid #bebebe',\n          marginBottom: '20px',\n          padding: '10px',\n        }}\n      >\n        <h3>Modal content</h3>\n        <input onChange={this.onChange} type=\"text\" name=\"name\" placeholder=\"name\" />\n        <input onChange={this.onChange} type=\"text\" name=\"email\" placeholder=\"email\" />\n        <button onClick={() => submit({ name, email })}>Submit</button>\n        <button onClick={cancel}>Cancel</button>\n      </div>\n    );\n  }\n};\n\nexport default createModal(Modal);\n","import React from \"react\";\nimport { ModalContainer } from 'promodal';\nimport showModal from './Modal';\n\nexport default class App extends React.Component {\n  showModal = () => {\n    showModal().then((data) => {\n      alert(JSON.stringify(data, null, 2));\n    }, () => {\n      alert('rejected');\n    });\n  };\n  render () {\n    return (\n      <div>\n        <ModalContainer />\n        <p>Click button and create new modal</p>\n        <button onClick={this.showModal}>Show modal</button>\n      </div>\n    );\n  }\n};\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}